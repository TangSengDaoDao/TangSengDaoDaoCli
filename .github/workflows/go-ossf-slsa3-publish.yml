# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow lets you compile your Go project using a SLSA3 compliant builder. 
# This workflow will generate a so-called "provenance" file describing the steps 
# that were performed to generate the final binary.
# The project is an initiative of the OpenSSF (openssf.org) and is developed at 
# https://github.com/slsa-framework/slsa-github-generator.
# The provenance file can be verified using https://github.com/slsa-framework/slsa-verifier.
# For more information about SLSA and how it improves the supply-chain, visit slsa.dev.

name: SLSA Go releaser
on:
  push:
    tags:
      - "*.*.*"

permissions: read-all

jobs:
  # Generate ldflags dynamically.
  # Optional: only needed for ldflags.
  args:
    runs-on: ubuntu-latest
    outputs:
      commit-date: ${{ steps.ldflags.outputs.commit-date }}
      commit: ${{ steps.ldflags.outputs.commit }}
      version: ${{ steps.ldflags.outputs.version }}
      tree-state: ${{ steps.ldflags.outputs.tree-state }}
    steps:
      - id: checkout
        uses: actions/checkout@v3 # tag=v2.3.4
        with:
          fetch-depth: 0
      - id: ldflags
        run: |
          echo "commit-date=$(git log --date=iso8601-strict -1 --pretty=%ct)" >> "$GITHUB_OUTPUT"
          echo "commit=$GITHUB_SHA" >> "$GITHUB_OUTPUT"
          echo "version=$(git describe --tags --always --dirty | cut -c2-)" >> "$GITHUB_OUTPUT"
          echo "tree-state=$(if git diff --quiet; then echo "clean"; else echo "dirty"; fi)" >> "$GITHUB_OUTPUT"            
            
  # Trusted builder.
  release-linux-binary:
    needs: args
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.20.3
          check-latest: true
          cache: true
      - name: Install cross-compiler for linux/arm64
        run: sudo apt-get -y install gcc-aarch64-linux-gnu    
      - name: Release
        uses: goreleaser/goreleaser-action@v4
        with:
          args: release --config scripts/.goreleaser-for-linux.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
  release-darwin-binary:
    needs: args
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: 1.20.3
          check-latest: true
          cache: true
      - name: Release
        uses: goreleaser/goreleaser-action@v4
        with:
          args: release --config scripts/.goreleaser-for-darwin.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}           
    # uses: tangtaoit/slsa-github-generator/.github/workflows/builder_go_slsa3.yml@v1.5.0
    # with:
    #   go-version: 1.20.3
    #   # Optional: only needed if using ldflags.
    #   evaluated-envs: "COMMIT_DATE:${{needs.args.outputs.commit-date}}, COMMIT:${{needs.args.outputs.commit}}, VERSION:${{needs.args.outputs.version}}, TREE_STATE:${{needs.args.outputs.tree-state}}"
    #   config-file: slsa/goreleaser-${{matrix.os}}-${{matrix.arch}}.yml


  # verification-linux:
  #   needs:
  #     - build-linux
  #   runs-on: ubuntu-latest
  #   permissions: read-all
  #   steps:
  #     - name: Install the verifier
  #       uses: slsa-framework/slsa-verifier/actions/installer@v2.1.0

  #     - name: Download assets
  #       env:
  #         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         ATT_FILE_NAME: "${{ needs.build-linux.outputs.go-binary-name }}.intoto.jsonl"
  #         ARTIFACT: ${{ needs.build-linux.outputs.go-binary-name }}
  #       run: |
  #         set -euo pipefail
  #         gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p $ARTIFACT
  #         gh -R "$GITHUB_REPOSITORY" release download "$GITHUB_REF_NAME" -p "$ATT_FILE_NAME"
  #     - name: Verify assets
  #       env:
  #         ARTIFACT: ${{ needs.build-linux.outputs.go-binary-name }}
  #         ATT_FILE_NAME: "${{ needs.build-linux.outputs.go-binary-name }}.intoto.jsonl"
  #       run: |
  #         set -euo pipefail
              
  #         echo "Verifying $ARTIFACT using $ATT_FILE_NAME"
  #         slsa-verifier verify-artifact --provenance-path "$ATT_FILE_NAME" \
  #                                       --source-uri "github.com/$GITHUB_REPOSITORY" \
  #                                       --source-tag "$GITHUB_REF_NAME" \
  #                                       "$ARTIFACT"